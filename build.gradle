buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
    }
}

plugins {
    id 'application'
    id 'com.google.protobuf' version '0.8.5'
    id 'idea'
    id 'eclipse'
    id 'java'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
}

apply plugin: 'io.spring.dependency-management'

group 'biz.cits.micro'
version '1.0-SNAPSHOT'

bootJar {
    baseName = 'grpc-micro'
    version = '0.1.0'
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

def grpcVersion = '1.18.0'
def protobufVersion = '3.6.1'
def protocVersion = protobufVersion

repositories {
    mavenCentral()
}

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "javax.annotation:javax.annotation-api:1.2"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'

    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:1.9.5"
}

startScripts.enabled = false

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            srcDir 'build/generated/source/proto/main/grpc'
            srcDir 'build/generated/source/proto/main/java'
        }
    }
    test {
        proto {
            srcDir 'src/test/protocolbuffers'
        }
    }
}

task routesServer(type: CreateStartScripts) {
    mainClassName = 'biz.cits.service.RoutesServer'
    applicationName = 'routes-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task routesClient(type: CreateStartScripts) {
    mainClassName = 'biz.cits.service.RoutesClient'
    applicationName = 'routes-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}